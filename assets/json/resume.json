{
  "basics": {
    "name": "Victor-Alexandru Pădurean",
    "label": "Ph.D. Student",
    "email": "victor.padurean[at]yahoo[dot]com",
    "url": "https://vicondrus.github.io"
  },
  "education": [
    {
      "institution": "Max Planck Institute for Software Systems / Saarland University",
      "location": "Saarbrücken, Germany",
      "url": "https://www.cis.mpg.de/cs-max-planck/",
      "area": "Machine Teaching",
      "studyType": "Ph.D.",
      "startDate": "2021-09-20"
    },
    {
      "institution": "Technical University of Cluj-Napoca",
      "location": "Cluj-Napoca, Romania",
      "url": "https://www.utcluj.ro/en/",
      "area": "Computer Science",
      "studyType": "B.Sc.",
      "startDate": "2017-10-01",
      "endDate": "2021-07-01",
      "score": "valedictorian"
    }
  ],
  "work": [
    {
      "name": "Linnify",
      "position": "Data Scientist",
      "url": "https://www.linnify.com/",
      "startDate": "1933-01-01",
      "endDate": "1955-01-01",
      "summary": "Researching and developing approaches for correlating workplace data with employee stress levels."
    }
  ],
  "publications": [
    {
      "name": "Neural Task Synthesis for Visual Programming",
      "publisher": "Transations on Machine Learning Research",
      "releaseDate": "2024.01.16",
      "url": "https://arxiv.org/abs/2305.18342",
      "summary": "Generative neural models hold great promise in enhancing programming education by synthesizing new content. We seek to design neural models that can automatically generate programming tasks for a given specification in the context of visual programming domains. Despite the recent successes of large generative models like GPT-4, our initial results show that these models are ineffective in synthesizing visual programming tasks and struggle with logical and spatial reasoning. We propose a novel neuro-symbolic technique, NeurTaskSyn, that can synthesize programming tasks for a specification given in the form of desired programming concepts exercised by its solution code and constraints on the visual task. NeurTaskSyn has two components: the first component is trained via imitation learning procedure to generate possible solution codes, and the second component is trained via reinforcement learning procedure to guide an underlying symbolic execution engine that generates visual tasks for these codes. We demonstrate the effectiveness of NeurTaskSyn through an extensive empirical evaluation and a qualitative study on reference tasks taken from the Hour of Code: Classic Maze challenge by Code-dot-org and the Intro to Programming with Karel course by CodeHS-dot-com. "
    }
  ],
  "skills": [
    {
      "name": "Programming",
      "level": "Master",
      "icon": "fa-solid fa-code",
      "keywords": [
        "Python",
        "PyTorch",
        "Django",
        "JavaScript",
        "React",
        "LaTeX",
        "Docker",
        "Git",
        "Linux"
      ]
    },
    {
      "name": "Artificial Intelligence",
      "level": "Master",
      "icon": "fa-solid fa-brain",
      "keywords": [
        "Deep Learning",
        "Generative Models",
        "Language Models",
        "Reinforcement Learning"
      ]
    },
    {
      "name": "Soft Skills",
      "level": "Master",
      "icon": "fa-solid fa-handshake",
      "keywords": [
        "Motivation",
        "Teamwork",
        "Communication",
        "Time Management",
        "Problem Solving",
        "Presenting",
        "Writing"
      ]
    }
  ],
  "languages": [
    {
      "language": "Romanian",
      "fluency": "Native speaker",
      "icon": ""
    },
    {
      "language": "English",
      "fluency": "Proficient",
      "icon": ""
    }
  ],
  "interests": [
    {
      "name": "Physics",
      "icon": "fa-solid fa-tag",
      "keywords": [
        "Quantum Mechanics",
        "Quantum Computing",
        "Quantum Information",
        "Quantum Cryptography",
        "Quantum Communication",
        "Quantum Teleportation"
      ]
    }
  ]
}
